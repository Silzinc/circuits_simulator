fn test_() -> crate::error::Result<()>
{
	// Emulate a serial RLC circuit with a square wave of period
	// 4 ms that starts after 2 ms as input
	use crate::{
		Circuit, Component,
		Dipole::{Capacitor, Inductor, Resistor},
		Source,
	};
	use std::{env, fs::File, io::prelude::Write, process::Command, time::Instant};

	fn square_wave(x: f64) -> f64
	{
		if x < 2e-3 {
			0.
		} else if ((x + 2e-3) % 4e-3) > 2e-3 {
			-1.
		} else {
			1.
		}
	}

	let n_freqs = 1000;
	let duration = 10e-3;
	let step = duration / n_freqs as f64;

	// Create the serial RLC circuit
	let mut c = Circuit::new();
	c.source = Source::from_fn(square_wave, duration, n_freqs);
	c.content.push_serie(Component::from(Resistor(200.))); // 0.2 kΩ, at position [0, 0]
	c.content.push_serie(Component::from(Capacitor(10e-9))); // 10 nF at position [0, 1]
	c.content.push_serie(Component::from(Inductor(100e-3))); // 100 mH at position [0, 2]

	// With this, the attenuation time is 500 µs
	// and the pseudo-period is close to 200 µs

	// Simulate the circuit
	let start = Instant::now();
	let result = c.emulate_many(duration, step, &vec![vec![0u8], vec![0u8, 1u8]])?;
	let time_required = start.elapsed().as_secs_f64();
	Command::new("echo").arg(format!("Time required to emulate the circuit: {}s", time_required))
	                    .spawn()
	                    .expect("Failed to print the duration");
	let tensions1 = &result[0].1; // Tension generated by the source (because of Kirchhoff's voltage law)
	let tensions2 = &result[1].1; // Tension felt by the capacitor

	// Save the results to a file
	env::set_current_dir(env!("CARGO_MANIFEST_DIR")).expect("Failed to set current dir");
	let out_dir = env::current_dir()?.join("out");
	let mut tensions1_file = File::create(out_dir.join("tensions1.txt")).expect("Failed to create source's tensions text file");
	let mut tensions2_file = File::create(out_dir.join("tensions2.txt")).expect("Failed to create capacitor's tensions text file");
	tensions1_file.write_all(format!("{:?}", tensions1).as_bytes())
	              .expect("Failed to write source's tensions");
	tensions2_file.write_all(format!("{:?}", tensions2).as_bytes())
	              .expect("Failed to write capacitor's tensions");

	// Plot the results using Python
	Command::new("python3").arg(out_dir.join("plot.py"))
	                       .arg(format!("{duration}")) // Duration of the simulation given to Python
	                       .spawn()
	                       .expect("Failed to plot the results");
	Ok(())
}

#[test]
fn test()
{
	if let Err(e) = test_() {
		panic!("{}", e);
	}
}
