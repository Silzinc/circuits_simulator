fn test_() -> crate::error::Result<()>
{
	// Emulate a serial RC circuit with a square wave of period
	// 4s that starts after 2s as input
	use crate::structs::{
		circuit::Circuit,
		component::Component,
		dipole::Dipole::{Capacitor, Resistor},
		source::Source,
	};
	use std::{
		env::{current_dir, set_current_dir},
		fs::File,
		io::prelude::Write,
		process::Command,
		time::Instant,
	};

	fn square_wave(x: f64) -> f64
	{
		if x < 2. {
			return 0.;
		} else if ((x + 2.) % 4.) > 2. {
			-1.
		} else {
			1.
		}
	}

	let n_freqs = 1000;
	let duration = 10.;
	let step = 0.01;

	// Create the serial RC circuit
	let mut c = Circuit::new();
	c.source = Source::from_fn(square_wave, duration, n_freqs);
	c.content.push_serie(Component::from(Resistor(5000.))); // 1 kΩ, at position [0, 0]
	c.content.push_serie(Component::from(Capacitor(100e-6))); // 100 µF at position [0, 1]

	// With this, the attenuation time is 500 ms

	// Simulate the circuit
	let start = Instant::now();
	let result = c.emulate_many(duration, step, &vec![vec![0u8], vec![0u8, 1u8]])?;
	let duration = start.elapsed().as_secs_f64();
	println!("Duration: {}s", duration);
	let (_, tensions1, _) = &result[0]; // Tension generated by the source (because of Kirchhoff's voltage law)
	let (_, tensions2, _) = &result[1]; // Tension felt by the capacitor

	// Save the results to a file
	set_current_dir(env!("CARGO_MANIFEST_DIR")).expect("Failed to set current dir");
	let out_dir = current_dir()?.join("out");
	let mut tensions1_file = File::create(out_dir.join("tensions1.txt")).expect("Failed to create source's tensions text file");
	let mut tensions2_file = File::create(out_dir.join("tensions2.txt")).expect("Failed to create capacitor's tensions text file");
	tensions1_file.write_all(format!("{:?}", tensions1).as_bytes())
	              .expect("Failed to write source's tensions");
	tensions2_file.write_all(format!("{:?}", tensions2).as_bytes())
	              .expect("Failed to write capacitor's tensions");

	// Plot the results using Python
	Command::new("python3").arg(out_dir.join("plot.py"))
	                       .arg(format!("{duration}")) // Duration of the simulation given to Python
	                       .spawn()
	                       .expect("Failed to plot the results");
	Ok(())
}

#[test]
fn test()
{
	if let Err(e) = test_() {
		eprintln!("{}", e);
	}
}
